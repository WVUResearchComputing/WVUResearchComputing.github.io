.. _pl-r:

R Language
==========

R is a language and environment for statistical computing and graphics. It is a GNU project which is similar to the S language and environment which was developed at Bell Laboratories (formerly AT&T, now Lucent Technologies) by John Chambers and colleagues. R can be considered as a different implementation of S. There are some important differences, but much code written for S runs unaltered under R.

R provides a wide variety of statistical (linear and nonlinear modelling, classical statistical tests, time-series analysis, classification, clustering, …) and graphical techniques, and is highly extensible. The S language is often the vehicle of choice for research in statistical methodology, and R provides an Open Source route to participation in that activity.

One of R’s strengths is the ease with which well-designed publication-quality plots can be produced, including mathematical symbols and formulae where needed. Great care has been taken over the defaults for the minor design choices in graphics, but the user retains full control.

Activating R
------------

On Spruce Knob R is preinstalled from RHEL repositories. The RHEL version is 3.0.2 and it is considered too old for most scientific applications.
You should consider using the environment module for R which activates R 3.5.2 a far more recent version and compatible with most recent R packages.
To activate R 3.5.2 use::

  module load lang/R/3.5.2

On Thorny Flat, R is not preinstalled and the only choice is to use the environment module, execute the command below to activate it::

  module load lang/gcc/8.2.0 lang/java/jdk1.8.0_201 libs/openblas/0.3.7_gcc82 lang/r/3.5.2

Using R from the Terminal
-------------------------

The R package includes two executables, `R` and `Rscript`. The command R is used to start a text-based interactive session, on the terminal execute::

  $> R

  R version 3.5.2 (2018-12-20) -- "Eggshell Igloo"
  Copyright (C) 2018 The R Foundation for Statistical Computing
  Platform: x86_64-pc-linux-gnu (64-bit)

  R is free software and comes with ABSOLUTELY NO WARRANTY.
  You are welcome to redistribute it under certain conditions.
  Type 'license()' or 'licence()' for distribution details.

    Natural language support but running in an English locale

  R is a collaborative project with many contributors.
  Type 'contributors()' for more information and
  'citation()' on how to cite R or R packages in publications.

  Type 'demo()' for some demos, 'help()' for on-line help, or
  'help.start()' for an HTML browser interface to help.
  Type 'q()' to quit R.

  >

From there you can start typing R commands. Another way of working in R, and more suited for HPC environments is using R scripts.
To do so, first write your script in a ``.R`` file, for example, lets create a file ``hello.R`` like this::

  #!/usr/bin/env Rscript
  sayHello <- function(){
     print('hello')
  }

  sayHello()

The first line indicate to the shell that this is a R script. The next step is to change permissions to the file to become executable::

  $> chmod +x hello.R

The script is ready for execution. As this is such small program you can run it directly on the head node::

  $> ./hello.R
  [1] "hello"

However, for large executions, you should always create a submission script.
Create a file "runjob.pbs" with this content (For Spruce)::

  #!/bin/bash

  #PBS -N MY_R_SCRIPT
  #PBS -q debug
  #PBS -j oe
  #PBS -l nodes=1:ppn=1

  cd $PBS_O_WORKDIR

  module purge
  module load lang/R/3.5.2

  ./hello.R

The name of the job is declared with ``#PBS -N MY_R_SCRIPT``. The queue is declared with ``#PBS -q debug``, for executions that run in less than 4 hours ``standby`` is the preferable choice. The line ``#PBS -j oe`` joins the error with the output in a single file. The line ``#PBS -l nodes=1:ppn=1`` is equivalent with the default requesting a single node and a single core for the execution. In most cases R run serially but we will discuss some parallel executions below.
The line ``cd $PBS_O_WORKDIR`` change directory to the place where the command ``qsub`` was executed.
The line ``module purge`` clean the environment of any modules and ``module load lang/R/3.5.2``, this is the only line that changes between running on Spruce or Thorny as the names of the modules are different. The names of modules is converging so the need of this change will be less likely in the future.

Finally ``./hello.R`` executes the script and the output will be written in a file like ``MY_R_SCRIPT.o4714619`` with a different JobID at the end.
The contents of the file are shown below::

  $ cat MY_R_SCRIPT.o4714619
  [1] "hello"

Installing R Packages in default Directories
--------------------------------------------

The two usual ways to install R packages from CRAN is either executing

::

    install.packages('<Package Name>')

from the R prompt. Or using the command

::

    R CMD INSTALL <package>

from the command line. The second command only works if you have already
downloaded a copy of the package from CRAN or an external site. The
first will automatically download the package from CRAN. R will
automatically detect that you do not have permissions to write in the
system-wide R library folder and will prompt if you would like to
install in a local directory from within your home directory. This
folder will also be checked automatically when you run R for packages,
allowing you to use anything you install in this way.

For example, lets assume that you want to install the package "dplyr"::

  > install.packages("dplyr")
  Installing package into ‘/gpfs/home/<username>/R/x86_64-pc-linux-gnu-library/3.5’
  (as ‘lib’ is unspecified)
  --- Please select a CRAN mirror for use in this session ---
  Secure CRAN mirrors

   1: 0-Cloud [https]                   2: Algeria [https]
  ...
  ...
  57: USA (CA 1) [https]               58: USA (IA) [https]
  59: USA (KS) [https]                 60: USA (MI 1) [https]
  61: USA (MI 2) [https]               62: USA (OR) [https]
  63: USA (TN) [https]                 64: USA (TX 1) [https]
  65: Uruguay [https]                  66: (other mirrors)


  Selection: 63

  also installing the dependencies ‘backports’, ‘ellipsis’, ‘digest’, ‘zeallot’, ‘utf8’, ‘vctrs’, ‘cli’, ‘crayon’, ‘fansi’, ‘pillar’, ‘purrr’, ‘assertthat’, ‘glue’, ‘magrittr’, ‘pkgconfig’, ‘R6’, ‘Rcpp’, ‘rlang’, ‘tibble’, ‘tidyselect’, ‘BH’, ‘plogr’

After some downloads and compilations the code will be installed on your local folder ``$HOME/R/x86_64-pc-linux-gnu-library/3.5``


Installing R Packages in non-default directories
------------------------------------------------

Using install.packages()
~~~~~~~~~~~~~~~~~~~~~~~~

To use install.packages from the R prompt, before you start R you need
to modify the R\_LIBS environment variable

::

    export R_LIBS=<dir>

Then inside the R prompt you execute install.packages() as normal (see
above).

Using R CMD INSTALL
~~~~~~~~~~~~~~~~~~~

For 'R CMD INSTALL' command, you can specify the path with the l flag
(lowercase 'L')

::

    R CMD INSTALL -l <dir> <package_name>

Using Installed Packages from non-default directories
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To use locally installed packages, before you execute R you just need to
modify the R\_LIBS environment variable to tell R where to search for
local packages.

::

    export R_LIBS=<dir>
